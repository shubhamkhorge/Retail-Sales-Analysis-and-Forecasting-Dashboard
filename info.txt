# Drag and Drop File Upload Feature in the Dashboard

The dashboard.py script uses Streamlit's st.sidebar.file_uploader widget. This widget inherently supports:
Clicking to browse and select a file.
Dragging and dropping a file onto the uploader area.
How it works in your current project:
Single CSV File: The uploader in your dashboard.py is configured to accept a single CSV file at a time:

uploaded_file = st.sidebar.file_uploader(
    "Upload your sales data (CSV)",
    type=['csv'], #  <-- Specifies only CSV files
    help="Upload a CSV file with columns: Date, Store, Item, Sales"
)


Purpose: This feature is designed to allow a user to analyze their own retail sales CSV data instead of the default train.csv (whether it's the one you created, the one generated by data_generator.py, or the one preprocessed from the Favorita dataset).
Data Processing:
If a file is uploaded, the dashboard reads this new CSV into a pandas DataFrame.
It then performs date parsing and uses this uploaded data for all subsequent visualizations and for the "Run ML Analysis" button within that dashboard session.
"Model" Interaction:
The "model" itself (the code in retail_sales_analysis.py) doesn't directly "see" the drag-and-drop action.
When you click "Run ML Analysis" in the dashboard after uploading a file, the dashboard takes the DataFrame created from your uploaded file, saves it to a temporary CSV (temp_dashboard_data.csv), and then the RetailSalesAnalyzer class is initialized with this temporary file to perform its analysis.
Limitations/Clarifications:
One File at a Time: You can only upload one CSV file at a time through this specific uploader. It's not designed to, for example, upload train.csv, stores.csv, and items.csv simultaneously and merge them within the dashboard. That would require a more complex setup.
Expected Format: The uploaded CSV file should ideally have the same columns your project is built around (Date, Store, Item, Category, Promotion, Sales). If some columns (like Category or Promotion) are missing, some dashboard features or ML analysis steps might not work as expected or might produce errors if not handled gracefully. The scripts have some robustness, but the closer the uploaded file is to the expected schema, the better.
Not for Multiple Input Files to the Core Model Directly: If you wanted to incorporate, say, stores.csv and holidays.csv from the Favorita dataset into the main RetailSalesAnalyzer's logic permanently, you would typically do that in a data preprocessing script (like your preprocess_favorita.py) before the RetailSalesAnalyzer even sees the data, or modify RetailSalesAnalyzer to accept paths to multiple files.
So, yes, you can drag and drop a different CSV sales data file into the dashboard to analyze it.